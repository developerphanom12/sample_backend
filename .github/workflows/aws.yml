name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env vars
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "AWS_REGION=eu-west-2" >> $GITHUB_ENV

          if [[ "${{github.base_ref}}" == "main" || "${{github.ref}}" == "refs/heads/main" ]]; then
            echo "branch=development & env=development"
            echo "ENV=development" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.DEVELOPMENT_DB_HOST }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ secrets.DEVELOPMENT_DB_NAME }}" >> $GITHUB_ENV
            echo "DB_USERNAME=${{ secrets.DEVELOPMENT_DB_USERNAME }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DEVELOPMENT_DB_PASSWORD }}" >> $GITHUB_ENV

            echo "ECR_REPOSITORY=rh-api-dev-repo" >> $GITHUB_ENV
            echo "ECS_SERVICE=rh-dev-service" >> $GITHUB_ENV
            echo "ECS_CLUSTER=receipt-hub-dev-cluster" >> $GITHUB_ENV
            echo "CONTAINER_NAME=rh-dev-container" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION=deploy/task-definition-dev.json" >> $GITHUB_ENV

          else
            echo "branch=stage & ENV=staging"
            echo "ENV=staging" >> $GITHUB_ENV
            echo "DB_HOST=${{ secrets.STAGING_DB_HOST }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ secrets.STAGING_DB_NAME }}" >> $GITHUB_ENV
            echo "DB_USERNAME=${{ secrets.STAGING_DB_USERNAME }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}" >> $GITHUB_ENV

            echo "ECR_REPOSITORY=rh-api-stage-repo" >> $GITHUB_ENV
            echo "ECS_SERVICE=rh-stage-service" >> $GITHUB_ENV
            echo "ECS_CLUSTER=receipt-hub-stage-cluster" >> $GITHUB_ENV
            echo "CONTAINER_NAME=rh-stage-container" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION=deploy/task-definition-stage.json" >> $GITHUB_ENV
            repo rh-api-stage-repo
          fi

      - name: Create env file
        run: |
          echo DB_HOST=$DB_HOST >> .env.$ENV
          echo DB_NAME=$DB_NAME >> .env.$ENV
          echo DB_USERNAME=$DB_USERNAME >> .env.$ENV
          echo DB_PASSWORD=$DB_PASSWORD >> .env.$ENV

          echo JWT_SECRET=$JWT_SECRET >> .env.$ENV
          echo PORT=$PORT >> .env.$ENV
          cat .env.$ENV


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f Dockerfile.dev -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg ENV=$ENV .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
